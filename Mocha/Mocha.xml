<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Mocha</name>
    </assembly>
    <members>
        <member name="T:Mocha.Behaviours.BehaviourManager">
            <summary>
            Allows for registration of technology-specific actions (behaviours)
            and later invocation of recorded behaviours within technology-independent modules.
            </summary>
        </member>
        <member name="P:Mocha.Behaviours.BehaviourManager.RegisteredBehaviours">
            <summary>
            Dictionary containing registered behaviours.
            </summary>
        </member>
        <member name="M:Mocha.Behaviours.BehaviourManager.Record(System.String,System.Action)">
            <summary>
            Registers an action (behaviour).
            </summary>
            <param name="id">Identifier for registered behaviour.</param>
            <param name="behaviour">Action to be registered.</param>
        </member>
        <member name="M:Mocha.Behaviours.BehaviourManager.Record``1(System.String,System.Action{``0})">
            <summary>
            Registers an action (behaviour) with parameter.
            </summary>
            <typeparam name="TParam">Type of action parameter.</typeparam>
            <param name="id">Identifier for registered behaviour.</param>
            <param name="behaviour">Action to be registered.</param>
        </member>
        <member name="M:Mocha.Behaviours.BehaviourManager.Record``2(System.String,System.Func{``0,``1})">
            <summary>
            Registers an action (behaviour) with parameter which returns a value.
            </summary>
            <typeparam name="TParam">Type of action parameter.</typeparam>
            <typeparam name="TResult">Type of returning value.</typeparam>
            <param name="id">Identifier for registered behaviour.</param>
            <param name="behaviour">Function to be registered.</param>
        </member>
        <member name="M:Mocha.Behaviours.BehaviourManager.Recall(System.String)">
            <summary>
            Retrieves an <see cref="T:Mocha.Behaviours.IBehaviour"/> object associated with givent ID.
            </summary>
            <param name="id">Identifier of requested behaviour.</param>
        </member>
        <member name="M:Mocha.Behaviours.BehaviourManager.Recall``1(System.String)">
            <summary>
            Retrieves an <see cref="T:Mocha.Behaviours.IBehaviour`1"/> object associated with givent ID.
            </summary>
            <typeparam name="TParam">Parameter type of requested behaviour.</typeparam>
            <param name="id">Identifier of requested behaviour.</param>
        </member>
        <member name="M:Mocha.Behaviours.BehaviourManager.Recall``2(System.String)">
            <summary>
            Retrieves an <see cref="T:Mocha.Behaviours.IBehaviour`2"/> object associated with givent ID.
            </summary>
            <typeparam name="TParam">Parameter type of requested behaviour.</typeparam>
            <typeparam name="TResult">Type returning by requested behaviour.</typeparam>
            <param name="id">Identifier of requested behaviour.</param>
        </member>
        <member name="T:Mocha.Behaviours.Extensions.DI.BehaviourService">
            <summary>
            Provides implementation for <see cref="T:Mocha.Behaviours.Extensions.DI.IBehaviourService"/>.
            </summary>
        </member>
        <member name="M:Mocha.Behaviours.Extensions.DI.BehaviourService.Recall(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Mocha.Behaviours.Extensions.DI.BehaviourService.Recall``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Mocha.Behaviours.Extensions.DI.BehaviourService.Recall``2(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Mocha.Behaviours.Extensions.DI.IBehaviourService">
            <summary>
            Allows for registration of technology-specific actions (behaviours)
            and later invocation of recorded behaviours within technology-independent modules.
            </summary>
        </member>
        <member name="M:Mocha.Behaviours.Extensions.DI.IBehaviourService.Recall(System.String)">
            <summary>
            Retrieves an <see cref="T:Mocha.Behaviours.IBehaviour"/> object associated with givent ID.
            </summary>
            <param name="id">Identifier of requested behaviour.</param>
        </member>
        <member name="M:Mocha.Behaviours.Extensions.DI.IBehaviourService.Recall``1(System.String)">
            <summary>
            Retrieves an <see cref="T:Mocha.Behaviours.IBehaviour`1"/> object associated with givent ID.
            </summary>
            <typeparam name="TParam">Parameter type of requested behaviour.</typeparam>
            <param name="id">Identifier of requested behaviour.</param>
        </member>
        <member name="M:Mocha.Behaviours.Extensions.DI.IBehaviourService.Recall``2(System.String)">
            <summary>
            Retrieves an <see cref="T:Mocha.Behaviours.IBehaviour`2"/> object associated with givent ID.
            </summary>
            <typeparam name="TParam">Parameter type of requested behaviour.</typeparam>
            <typeparam name="TResult">Type returning by requested behaviour.</typeparam>
            <param name="id">Identifier of requested behaviour.</param>
        </member>
        <member name="T:Mocha.Behaviours.IBehaviour">
            <summary>
            Represent encapsulated action (behaviour) which can be executed by 
            technology-independent moduels.
            </summary>
        </member>
        <member name="M:Mocha.Behaviours.IBehaviour.Execute">
            <summary>
            Executes encapsulated behaviour.
            </summary>
        </member>
        <member name="T:Mocha.Behaviours.IBehaviour`1">
            <summary>
            Represent encapsulated action (behaviour) which can be executed by 
            technology-independent moduels.
            </summary>
            <typeparam name="TParam">Type of behaviour parameter.</typeparam>
        </member>
        <member name="M:Mocha.Behaviours.IBehaviour`1.Execute(`0)">
            <summary>
            Executes encapsulated behaviour.
            </summary>
            <param name="param">Parameter of execution.</param>
        </member>
        <member name="T:Mocha.Behaviours.IBehaviour`2">
            <summary>
            Represent encapsulated action (behaviour) which can be executed by 
            technology-independent moduels.
            </summary>
            <typeparam name="TParam">Type of behaviour parameter.</typeparam>
            <typeparam name="TResult">Type of value returned as a result of behaviour execution.</typeparam>
        </member>
        <member name="M:Mocha.Behaviours.IBehaviour`2.Execute(`0)">
            <summary>
            Executes encapsulated behaviour.
            </summary>
            <param name="param">Parameter of execution.</param>
        </member>
        <member name="T:Mocha.Dialogs.DialogControl">
            <summary>
            Exposes API for dialog interaction.
            </summary>
        </member>
        <member name="P:Mocha.Dialogs.DialogControl.DialogResult">
            <summary>
            Describes the result of dialog interaction.
            </summary>
        </member>
        <member name="P:Mocha.Dialogs.DialogControl.Parent">
            <summary>
            Parent element which called a dialog parametrized by this instance.
            Setting this to <see langword="null"/> means MainWindow is consider a parent.
            </summary>
        </member>
        <member name="P:Mocha.Dialogs.DialogControl.Title">
            <summary>
            Title for displaying dialog.
            </summary>
        </member>
        <member name="P:Mocha.Dialogs.DialogControl.Parameters">
            <summary>
            Allows for storage of custom parameters.
            </summary>
        </member>
        <member name="E:Mocha.Dialogs.DialogControl.Opening">
            <summary>
            Fires when dialog is displayed.
            </summary>
        </member>
        <member name="E:Mocha.Dialogs.DialogControl.Opened">
            <summary>
            Fires right after the dialog opens.
            <para> Not every implementation of <see cref="T:Mocha.Dialogs.IDialogModule"/> can supports this event ! </para>
            </summary>
        </member>
        <member name="E:Mocha.Dialogs.DialogControl.Closing">
            <summary>
            Fires when dialog is about to close.
            <para> Not every implementation of <see cref="T:Mocha.Dialogs.IDialogModule"/> supports this event ! </para>
            </summary>
        </member>
        <member name="M:Mocha.Dialogs.DialogControl.#ctor(Mocha.Dialogs.IDialog)">
            <summary>
            Returns new instance of <see cref="T:Mocha.Dialogs.DialogControl"/> class.
            </summary>
            <param name="dialog">
            An <see cref="T:Mocha.Dialogs.IDialog"/> implementation which hosts this instance.
            Pass <see langword="this"/> here.
            </param>
        </member>
        <member name="M:Mocha.Dialogs.DialogControl.GetParameter``1(System.String)">
            <summary>
            Tries to fetch parameter corresponding to specified key from
            <see cref="P:Mocha.Dialogs.DialogControl.Parameters"/> dictionary. Returns default value of
            expected type in case of type mismatch or no parameter was found.
            </summary>
            <typeparam name="T">Expected type of retrieving value.</typeparam>
            <param name="key">Parameter key.</param>
        </member>
        <member name="M:Mocha.Dialogs.DialogControl.SetParameter(System.String,System.Object)">
            <summary>
            Adds or updates specified parameter within <see cref="P:Mocha.Dialogs.DialogControl.Parameters"/> dictionary.
            </summary>
            <param name="key">Parameter key.</param>
            <param name="value">Value to be added or updated.</param>
        </member>
        <member name="M:Mocha.Dialogs.DialogControl.Close">
            <summary>
            Closes the dialog if open.
            </summary>
        </member>
        <member name="M:Mocha.Dialogs.DialogControl.Dispose">
            <summary>
            Perform cleaning operations allowing this object to be garbage collected.
            </summary>
        </member>
        <member name="M:Mocha.Dialogs.DialogControl.Activate(Mocha.Dialogs.IDialogModule)">
            <summary>
            Performs operations to bind specified <see cref="T:Mocha.Dialogs.IDialogModule"/> with this instance.
            </summary>
            <param name="module">Module to bind with this instance.</param>
        </member>
        <member name="T:Mocha.Dialogs.DialogManager">
            <summary>
            Allows for defining, retrieving and managing dialogs.
            </summary>
        </member>
        <member name="M:Mocha.Dialogs.DialogManager.DefineDialog(System.String,System.Func{Mocha.Dialogs.IDialogModule})">
            <summary>
            Allows to register a <see cref="T:Mocha.Dialogs.IDialogModule"/>. Dialogs registered by this method can
            be tracked and obtained via <see cref="M:Mocha.Dialogs.DialogManager.GetActiveDialogs(System.String)"/> method.
            </summary>
            <param name="id">Identifier which allows the technology-independent layer retrieve this dialog.</param>
            <param name="dialogDelegate">This delegate should return new instance of <see cref="T:Mocha.Dialogs.IDialogModule"/> object.</param>
        </member>
        <member name="M:Mocha.Dialogs.DialogManager.GetDialog(System.String)">
            <summary>
            Retrieves a registered dialog by its identifier.
            </summary>
            <param name="id">Identifier of registered dialog to be retrieved.</param>
        </member>
        <member name="M:Mocha.Dialogs.DialogManager.GetDialog``1(System.String)">
            <summary>
            Creates an instance of specified <see cref="T:Mocha.Dialogs.IDialogModule`1"/> type.
            </summary>
            <typeparam name="T">Type of internal <see cref="T:Mocha.Dialogs.DialogControl"/> object.</typeparam>
            <param name="id">Specifies the dialog identifier.</param>
        </member>
        <member name="M:Mocha.Dialogs.DialogManager.GetActiveDialogs(System.String)">
            <summary>
            Returns a collection of references to created dialogs, which hasn't been disposed yet.
            </summary>
            <param name="id">Identifier of specific dialog.</param>
        </member>
        <member name="M:Mocha.Dialogs.DialogManager.GetActiveDialogs">
            <summary>
            Returns a collection of all <see cref="T:Mocha.Dialogs.IDialogModule"/>, which has been 
            requested by <see cref="M:Mocha.Dialogs.DialogManager.GetDialog(System.String)"/> method but not yet disposed.
            </summary>
        </member>
        <member name="T:Mocha.Dialogs.Extensions.DI.DialogFactory">
            <summary>
            Provides an implementation of <see cref="T:Mocha.Dialogs.Extensions.DI.IDialogFactory"/> interface.
            </summary>
        </member>
        <member name="M:Mocha.Dialogs.Extensions.DI.DialogFactory.Create(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Mocha.Dialogs.Extensions.DI.DialogFactory.Create``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Mocha.Dialogs.Extensions.DI.DialogFactory.GetActiveDialogs(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Mocha.Dialogs.Extensions.DI.DialogFactory.GetActiveDialogs">
            <inheritdoc/>
        </member>
        <member name="T:Mocha.Dialogs.Extensions.DI.IDialogFactory">
            <summary>
            Provides instances of dialogs registered by <see cref="T:Mocha.Dialogs.DialogManager"/> class.
            </summary>
        </member>
        <member name="M:Mocha.Dialogs.Extensions.DI.IDialogFactory.Create(System.String)">
            <summary>
            Returns new instance of <see cref="T:Mocha.Dialogs.IDialogModule"/> corresponding to given identifier.
            </summary>
            <param name="id">Specifies the dialog identifier.</param>
        </member>
        <member name="M:Mocha.Dialogs.Extensions.DI.IDialogFactory.Create``1(System.String)">
            <summary>
            Returns new instance of <see cref="T:Mocha.Dialogs.IDialogModule`1"/> corresponding to given indetifier.
            </summary>
            <typeparam name="T">Type of <see cref="T:Mocha.Dialogs.DialogControl"/> object used by created dialog.</typeparam>
            <param name="id">Specifies the dialog identifier.</param>
        </member>
        <member name="M:Mocha.Dialogs.Extensions.DI.IDialogFactory.GetActiveDialogs(System.String)">
            <summary>
            Returns a collection of instantiated <see cref="T:Mocha.Dialogs.IDialogModule"/> with given ID which haven't been disposed yet.
            </summary>
            <param name="id">Specifies the dialog identifier.</param>
        </member>
        <member name="M:Mocha.Dialogs.Extensions.DI.IDialogFactory.GetActiveDialogs">
            <summary>
            Returns a collection of all instantiated <see cref="T:Mocha.Dialogs.IDialogModule"/>, which haven't been disposed yet.
            </summary>
        </member>
        <member name="T:Mocha.Dialogs.Extensions.FileDialogControl">
            <summary>
            Exposes API for file dialog interaction.
            </summary>
        </member>
        <member name="M:Mocha.Dialogs.Extensions.FileDialogControl.#ctor(Mocha.Dialogs.IDialog)">
            <summary>
            Returns new instance of <see cref="T:Mocha.Dialogs.Extensions.FileDialogControl"/> class.
            </summary>
            <param name="dialog">
            An <see cref="T:Mocha.Dialogs.IDialog`1"/> implementation which hosts this instance.
            Pass <see langword="this"/> here.
            </param>
        </member>
        <member name="P:Mocha.Dialogs.Extensions.FileDialogControl.SelectedPath">
            <summary>
            Path selected as a result of interaction with file dialog.
            </summary>
        </member>
        <member name="P:Mocha.Dialogs.Extensions.FileDialogControl.Filter">
            <summary>
            Defines a filter for Open/Save dialog.
            </summary>
        </member>
        <member name="P:Mocha.Dialogs.Extensions.FileDialogControl.InitialDirectory">
            <summary>
            Sets initial directory for Open/Save dialog.
            </summary>
        </member>
        <member name="P:Mocha.Dialogs.Extensions.FileDialogControl.DefaultExtension">
            <summary>
            Extension added automatically in case none was specified.
            </summary>
        </member>
        <member name="T:Mocha.Dialogs.Extensions.StandardDialogControl">
            <summary>
            Exposes API for standard dialog interaction.
            </summary>
        </member>
        <member name="M:Mocha.Dialogs.Extensions.StandardDialogControl.#ctor(Mocha.Dialogs.IDialog)">
            <summary>
            Returns new instance of <see cref="T:Mocha.Dialogs.Extensions.StandardDialogControl"/> class.
            </summary>
            <param name="dialog">
            An <see cref="T:Mocha.Dialogs.IDialog`1"/> implementation which hosts this instance.
            Pass <see langword="this"/> here.
            </param>
        </member>
        <member name="P:Mocha.Dialogs.Extensions.StandardDialogControl.Message">
            <summary>
            Message for displaying dialog.
            </summary>
        </member>
        <member name="P:Mocha.Dialogs.Extensions.StandardDialogControl.Icon">
            <summary>
            Icon for displaying dialog.
            </summary>
        </member>
        <member name="P:Mocha.Dialogs.Extensions.StandardDialogControl.PredefinedButtons">
            <summary>
            Defines a predefined buttons set for displaying dialog.
            </summary>
        </member>
        <member name="T:Mocha.Dialogs.IDialog">
            <summary> 
            Marks implementing class as dialog logic.
            </summary>
        </member>
        <member name="P:Mocha.Dialogs.IDialog.DialogControl">
            <summary>
            Exposes API for dialog management.
            </summary>
        </member>
        <member name="T:Mocha.Dialogs.IDialog`1">
            <summary>
            Marks implementing class as dialog logic.
            </summary>
            <typeparam name="T">Specifies statically typed parameters for the associated dialog.</typeparam>
        </member>
        <member name="P:Mocha.Dialogs.IDialog`1.DialogControl">
            <summary>
            Exposes API for dialog management.
            </summary>
        </member>
        <member name="T:Mocha.Dialogs.IDialogModule">
            <summary>
            Exposes methods and properties for interaction with technology-independent dialog representation.
            </summary>
        </member>
        <member name="P:Mocha.Dialogs.IDialogModule.View">
            <summary>
            Reference to technology-specific view object.
            </summary>
        </member>
        <member name="P:Mocha.Dialogs.IDialogModule.DataContext">
            <summary>
            An <see cref="T:Mocha.Dialogs.IDialog"/> object bounded to <see cref="P:Mocha.Dialogs.IDialogModule.View"/>
            instance by *DataBinding* mechanism.
            </summary>
        </member>
        <member name="P:Mocha.Dialogs.IDialogModule.IsOpen">
            <summary>
            Specifies whether this dialog is currently open.
            </summary>
        </member>
        <member name="E:Mocha.Dialogs.IDialogModule.Opening">
            <summary>
            Fires when dialog is about to be displayed.
            </summary>
        </member>
        <member name="E:Mocha.Dialogs.IDialogModule.Opened">
            <summary>
            Fires right after the dialog opens.
            <para> Not every implementation of <see cref="T:Mocha.Dialogs.IDialogModule"/> can supports this event ! </para>
            </summary>
        </member>
        <member name="E:Mocha.Dialogs.IDialogModule.Closing">
            <summary>
            Fires when dialog is about to close.
            <para> Not every implementation of <see cref="T:Mocha.Dialogs.IDialogModule"/> can supports this event ! </para>
            </summary>
        </member>
        <member name="E:Mocha.Dialogs.IDialogModule.Closed">
            <summary>
            Fires when dialog closes.
            </summary>
        </member>
        <member name="E:Mocha.Dialogs.IDialogModule.Disposed">
            <summary>
            Fires when dialog is done.
            <para>"Comrade soldier, you're done!"</para>
            </summary>
        </member>
        <member name="M:Mocha.Dialogs.IDialogModule.Show">
            <summary>
            Opens a dialog represented by this instance.
            </summary>
        </member>
        <member name="M:Mocha.Dialogs.IDialogModule.ShowModal">
            <summary>
            Opens a dialog represented by this instance in modal mode. 
            Returns result of dialog interaction.
            </summary>
        </member>
        <member name="M:Mocha.Dialogs.IDialogModule.ShowAsync">
            <summary>
            Opens a dialog represented by this instance in asynchronous manner.
            </summary>
        </member>
        <member name="M:Mocha.Dialogs.IDialogModule.ShowModalAsync">
            <summary>
            Asynchronously opens a dialog represented by this instance in modal mode. 
            Returns result of dialog interaction.
            </summary>
        </member>
        <member name="M:Mocha.Dialogs.IDialogModule.SetDataContext(Mocha.Dialogs.IDialog)">
            <summary>
            Sets a * DataContext * for <see cref="P:Mocha.Dialogs.IDialogModule.View"/> object.
            </summary>
            <param name="dialog">Dialog logic to be set by * DataContext * mechanism.</param>
        </member>
        <member name="M:Mocha.Dialogs.IDialogModule.Close">
            <summary>
            Closes the dialog if open.
            </summary>
        </member>
        <member name="T:Mocha.Dialogs.IDialogModule`1">
            <summary>
            Exposes methods and properties for interaction with technology-independent dialog representation.
            </summary>
            <typeparam name="T">Specifies statically typed parameters for the associated dialog logic.</typeparam>
        </member>
        <member name="P:Mocha.Dialogs.IDialogModule`1.DataContext">
            <summary>
            An <see cref="T:Mocha.Dialogs.IDialog"/> object bounded to <see cref="P:Mocha.Dialogs.IDialogModule.View"/>
            instance by *DataBinding* mechanism.
            </summary>
        </member>
        <member name="T:Mocha.Dialogs.StandardDialogParameters">
            <summary>
            Contains standarized keys for dialog parameters.
            </summary>
        </member>
        <member name="P:Mocha.Dialogs.StandardDialogParameters.SelectedPath">
            <summary>
            Path selected as a result of interaction with file dialog.
            </summary>
        </member>
        <member name="P:Mocha.Dialogs.StandardDialogParameters.Filter">
            <summary>
            Defines a filter for Open/Save dialog.
            </summary>
        </member>
        <member name="P:Mocha.Dialogs.StandardDialogParameters.InitialDirectory">
            <summary>
            Sets initial directory for Open/Save dialog.
            </summary>
        </member>
        <member name="P:Mocha.Dialogs.StandardDialogParameters.DefaultExtension">
            <summary>
            Extension added automatically in case none was specified.
            </summary>
        </member>
        <member name="P:Mocha.Dialogs.StandardDialogParameters.Message">
            <summary>
            Message for displaying dialog.
            </summary>
        </member>
        <member name="P:Mocha.Dialogs.StandardDialogParameters.Icon">
            <summary>
            Icon for displaying dialog.
            </summary>
        </member>
        <member name="P:Mocha.Dialogs.StandardDialogParameters.PredefinedButtons">
            <summary>
            Defines a predefined buttons set for displaying dialog.
            </summary>
        </member>
        <member name="T:Mocha.SimpleDialogData">
            <summary>
            Sometimes you don't need a custom logic for particular dialog. Use <see cref="T:Mocha.SimpleDialogData"/>
            to satisfy backend requirement for <see cref="T:Mocha.Dialogs.IDialogModule"/> when no specific backend is needed.
            </summary>
        </member>
        <member name="P:Mocha.SimpleDialogData.DialogControl">
            <summary>
            Exposes API for dialog interaction.
            </summary>
        </member>
        <member name="M:Mocha.SimpleDialogData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mocha.SimpleDialogData"/> class. 
            </summary>
        </member>
        <member name="T:Mocha.SimpleDialogData`1">
            <summary>
            Sometimes you don't need a custom logic for particular dialog. Use <see cref="T:Mocha.SimpleDialogData"/>
            to satisfy backend requirement for <see cref="T:Mocha.Dialogs.IDialogModule"/> when no specific backend is needed.
            </summary>
            <typeparam name="T">Specifies statically typed parameters for the associated dialog.</typeparam>
        </member>
        <member name="P:Mocha.SimpleDialogData`1.DialogControl">
            <summary>
            Exposes API for dialog interaction.
            </summary>
        </member>
        <member name="P:Mocha.SimpleDialogData`1.Mocha#Dialogs#IDialog#DialogControl">
            <summary>
            Exposes API for dialog interaction.
            </summary>
        </member>
        <member name="M:Mocha.SimpleDialogData`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mocha.SimpleDialogData`1"/> class. 
            </summary>
        </member>
        <member name="T:Mocha.Dispatching.DispatcherManager">
            <summary>
            Allows for registering and retrieving <see cref="T:Mocha.Dispatching.IDispatcher"/> object
            which allows for code execution on the application Main Thread in MVVM architecure.
            </summary>
        </member>
        <member name="M:Mocha.Dispatching.DispatcherManager.SetMainThreadDispatcher(Mocha.Dispatching.IDispatcher)">
            <summary>
            Sets an <see cref="T:Mocha.Dispatching.IDispatcher"/> implementation which allows 
            for code execution on the application Main Thread
            </summary>
            <param name="dispatcher">Object implementing <see cref="T:Mocha.Dispatching.IDispatcher"/> interface.</param>
        </member>
        <member name="M:Mocha.Dispatching.DispatcherManager.GetMainThreadDispatcher">
            <summary>
            Returns registered <see cref="T:Mocha.Dispatching.IDispatcher"/> implementation.
            Throws if dispatcher hasn't been registered.
            </summary>
            <exception cref="T:System.NullReferenceException"/>
        </member>
        <member name="T:Mocha.Dispatching.Extensions.DI.DispatcherService">
            <summary>
            Provides implementation for <see cref="T:Mocha.Dispatching.Extensions.DI.IDispatcherService"/>.
            </summary>
        </member>
        <member name="M:Mocha.Dispatching.Extensions.DI.DispatcherService.GetMainThreadDispatcher">
            <inheritdoc/>
        </member>
        <member name="T:Mocha.Dispatching.Extensions.DI.IDispatcherService">
            <summary>
            Allows for retrieving main thread dispatcher object for Dependency Injection architecure.
            </summary>
        </member>
        <member name="M:Mocha.Dispatching.Extensions.DI.IDispatcherService.GetMainThreadDispatcher">
            <summary>
            Returns registered <see cref="T:Mocha.Dispatching.IDispatcher"/> implementation.
            Throws if dispatcher hasn't been registered.
            </summary>
            <exception cref="T:System.NullReferenceException"/>
        </member>
        <member name="T:Mocha.Dispatching.IDispatcher">
            <summary>
            Allows for code execution on Main/UI Thread.
            </summary>
        </member>
        <member name="M:Mocha.Dispatching.IDispatcher.RunOnMainThread(System.Action)">
            <summary>
            Executes given delegate on Main Thread and blocks until execution in finished.
            </summary>
            <param name="action">Delegate to be executed on Main Thread</param>
        </member>
        <member name="M:Mocha.Dispatching.IDispatcher.EnqueueOnMainThread(System.Action)">
            <summary>
            Enqueues given delegate to be executed by Main Thread when possible.
            </summary>
            <param name="action">Delegate to be enqueued</param>
        </member>
        <member name="M:Mocha.Dispatching.IDispatcher.Yield">
            <summary>
            Returns control to the Main/UI thread and executes succeeding code 
            when Main/UI thread is free.
            </summary>
        </member>
        <member name="T:Mocha.Events.AppEventManager">
            <summary>
            Allows for handling technology-specific events within technology-independent modules.
            </summary>
        </member>
        <member name="M:Mocha.Events.AppEventManager.IncludeEventProvider``1(System.String,Mocha.Events.IEventProvider{``0})">
            <summary>
            Registers provided implementation of <see cref="T:Mocha.Events.IEventProvider`1"/> with given ID.
            </summary>
            <typeparam name="TEventArgs">Type of event arguments.</typeparam>
            <param name="id"><see cref="T:Mocha.Events.IEventProvider`1"/> unique identifier.</param>
            <param name="eventProvider">Implementation of <see cref="T:Mocha.Events.IEventProvider`1"/>.</param>
        </member>
        <member name="M:Mocha.Events.AppEventManager.RequestEventProvider``1(System.String)">
            <summary>
            Returns provided implementation of <see cref="T:Mocha.Events.IEventProvider`1"/> corresponding to given ID.
            </summary>
            <typeparam name="TEventArgs">Type of event arguments.</typeparam>
            <param name="id">ID of requesting <see cref="T:Mocha.Events.IEventProvider`1"/>.</param>
        </member>
        <member name="T:Mocha.Events.AsyncEventHandler">
            <summary>
            Base type for <see cref="T:Mocha.Events.AsyncEventHandler`1"/> class.
            </summary>
        </member>
        <member name="P:Mocha.Events.AsyncEventHandler.Executed">
            <summary>
            Determines whether this <see cref="T:Mocha.Events.AsyncEventHandler"/> has been already executed.
            </summary>
        </member>
        <member name="P:Mocha.Events.AsyncEventHandler.Id">
            <summary>
            Identifier of <see cref="T:Mocha.Events.AsyncEventHandler"/>.
            </summary>
        </member>
        <member name="P:Mocha.Events.AsyncEventHandler.ExecuteInParallel">
            <summary>
            Determines whether this <see cref="T:Mocha.Events.AsyncEventHandler"/> can be executed in parallel together with
            other subscribed <see cref="T:Mocha.Events.AsyncEventHandler"/> objects.
            </summary>
        </member>
        <member name="P:Mocha.Events.AsyncEventHandler.Priority">
            <summary>
            Determines order of this <see cref="T:Mocha.Events.AsyncEventHandler"/> execution. Lower priority means first to execute.
            </summary>
        </member>
        <member name="M:Mocha.Events.AsyncEventHandler.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Base constructor.
            </summary>
            <param name="id">Identifier of <see cref="T:Mocha.Events.AsyncEventHandler"/>.</param>
            <param name="priority">Determines order of execution.</param>
            <param name="executeInParallel">See <see cref="P:Mocha.Events.AsyncEventHandler.ExecuteInParallel"/> property.</param>
        </member>
        <member name="T:Mocha.Events.AsyncEventHandler`1">
            <summary>
            Encapsulates event handler which can be executed asynchronously.
            </summary>
            <typeparam name="T">Type of event arguments.</typeparam>
        </member>
        <member name="M:Mocha.Events.AsyncEventHandler`1.#ctor(System.Func{`0,System.Collections.Generic.IReadOnlyCollection{Mocha.Events.AsyncEventHandler},System.Threading.Tasks.Task})">
            <summary>
            Initializes a new instance of the <see cref="T:Mocha.Events.AsyncEventHandler`1"/> class.
            </summary>
            <param name="eventHandler">Delegate returning asynchronous event handler.</param>
        </member>
        <member name="M:Mocha.Events.AsyncEventHandler`1.#ctor(System.Func{`0,System.Collections.Generic.IReadOnlyCollection{Mocha.Events.AsyncEventHandler},System.Threading.Tasks.Task},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mocha.Events.AsyncEventHandler`1"/> class.
            </summary>
            <param name="eventHandler">Delegate returning asynchronous event handler.</param>
            <param name="id">Identifier of <see cref="T:Mocha.Events.AsyncEventHandler"/>.</param>
        </member>
        <member name="M:Mocha.Events.AsyncEventHandler`1.#ctor(System.Func{`0,System.Collections.Generic.IReadOnlyCollection{Mocha.Events.AsyncEventHandler},System.Threading.Tasks.Task},System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mocha.Events.AsyncEventHandler`1"/> class.
            </summary>
            <param name="eventHandler">Delegate returning asynchronous event handler.</param>
            <param name="id">Identifier of <see cref="T:Mocha.Events.AsyncEventHandler"/>.</param>
            <param name="priority">Determines order of execution.</param>
        </member>
        <member name="M:Mocha.Events.AsyncEventHandler`1.#ctor(System.Func{`0,System.Collections.Generic.IReadOnlyCollection{Mocha.Events.AsyncEventHandler},System.Threading.Tasks.Task},System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Mocha.Events.AsyncEventHandler`1"/> class.
            </summary>
            <param name="eventHandler">Delegate returning asynchronous event handler.</param>
            <param name="id">Identifier of <see cref="T:Mocha.Events.AsyncEventHandler"/>.</param>
            <param name="priority">Determines order of execution.</param>
            <param name="parallel">See <see cref="P:Mocha.Events.AsyncEventHandler.ExecuteInParallel"/> property.</param>
        </member>
        <member name="M:Mocha.Events.AsyncEventHandler`1.Execute(`0,System.Collections.Generic.IReadOnlyCollection{Mocha.Events.AsyncEventHandler})">
            <summary>
            Executes asynchronosuly encapsulated event handler.
            </summary>
            <param name="eventArgs">Event arguments.</param>
            <param name="invocationList">
            Read-only collection of other <see cref="T:Mocha.Events.AsyncEventHandler`1"/> objects which subscribe to common event.
            </param>
        </member>
        <member name="M:Mocha.Events.AsyncEventHandler`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Mocha.Events.AsyncEventHandler`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Mocha.Events.BaseEventArgs">
            <summary>
            Provides a base class for <see cref="T:System.EventArgs"/> objects
            used with <see cref="N:Mocha.Events"/> namespace.
            </summary>
        </member>
        <member name="P:Mocha.Events.BaseEventArgs.RawArgs">
            <summary>
            Contains <see cref="T:System.EventArgs"/> object from the original technology-specific event.
            </summary>
        </member>
        <member name="M:Mocha.Events.BaseEventArgs.#ctor(System.EventArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:Mocha.Events.BaseEventArgs"/> class.
            </summary>
            <param name="rawArgs">Event arguments from original event.</param>
        </member>
        <member name="T:Mocha.Events.BaseEventProvider`1">
            <summary>
            Provides a base class for <see cref="T:Mocha.Events.IEventProvider`1"/> implementations.
            </summary>
            <typeparam name="TEventArgs">Type of arguments for encapsulated event.</typeparam>
        </member>
        <member name="P:Mocha.Events.BaseEventProvider`1.AsyncInvocationList">
            <summary>
            A collection of <see cref="T:Mocha.Events.AsyncEventHandler`1"/> event handlers, which are to be
            executed when encapsulated event occurs.
            </summary>
        </member>
        <member name="E:Mocha.Events.BaseEventProvider`1.Event">
            <inheritdoc/>
        </member>
        <member name="M:Mocha.Events.BaseEventProvider`1.SubscribeAsync(Mocha.Events.AsyncEventHandler{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Mocha.Events.BaseEventProvider`1.UnsubscribeAsync(System.Func{`0,System.Collections.Generic.IReadOnlyCollection{Mocha.Events.AsyncEventHandler},System.Threading.Tasks.Task})">
            <inheritdoc/>
        </member>
        <member name="M:Mocha.Events.BaseEventProvider`1.GetSortedInvocationList">
            <summary>
            Returns a collection of <see cref="T:Mocha.Events.AsyncEventHandler`1"/> event handlers in order of their execution priority.
            </summary>
        </member>
        <member name="M:Mocha.Events.BaseEventProvider`1.StartAndGetParallelCollection(`0)">
            <summary>
            Starts execution and returns collection of event handlers with <see cref="P:Mocha.Events.AsyncEventHandler.ExecuteInParallel"/>
            flag set to <see langword="true"/> for encapsulated event.
            </summary>
            <param name="eventArgs">Common arguments for execution of parallel event handlers.</param>
        </member>
        <member name="T:Mocha.Events.Extensions.AppClosingEventArgs">
            <summary>
            Provides arguments for application closing event.
            </summary>
        </member>
        <member name="P:Mocha.Events.Extensions.AppClosingEventArgs.Cancel">
            <summary>
            If set to <see langword="true"/> application won't close.
            </summary>
        </member>
        <member name="M:Mocha.Events.Extensions.AppClosingEventArgs.#ctor(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:Mocha.Events.Extensions.DI.EventService">
            <summary>
            Allows for handling technology-specific events within technology-independent modules.
            Use it for Dependency Injection architecture.
            </summary>
        </member>
        <member name="M:Mocha.Events.Extensions.DI.EventService.RequestEventProvider``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Mocha.Events.Extensions.DI.IEventService">
            <summary>
            Allows for handling technology-specific events within technology-independent modules.
            Use it for Dependency Injection architecture.
            </summary>
        </member>
        <member name="M:Mocha.Events.Extensions.DI.IEventService.RequestEventProvider``1(System.String)">
            <summary>
            Returns provided implementation of <see cref="T:Mocha.Events.IEventProvider`1"/> corresponding to given ID.
            </summary>
            <typeparam name="TEventArgs">Type of event arguments.</typeparam>
            <param name="id">ID of requesting <see cref="T:Mocha.Events.IEventProvider`1"/>.</param>
        </member>
        <member name="T:Mocha.Events.Extensions.HardwareBackButtonPressedEventArgs">
            <summary>
            Represents arguments for hardware back button pressed event.
            </summary>
        </member>
        <member name="P:Mocha.Events.Extensions.HardwareBackButtonPressedEventArgs.Cancel">
            <summary>
            If set to <see langword="true"/> allows to discard event effects.
            </summary>
        </member>
        <member name="T:Mocha.Events.IEventProvider`1">
            <summary>
            Encapsulates single event which can be subscribed to.
            </summary>
            <typeparam name="TEventArgs">Type of arguments for encapsulated event.</typeparam>
        </member>
        <member name="E:Mocha.Events.IEventProvider`1.Event">
            <summary>
            Encapsulated event.
            </summary>
        </member>
        <member name="M:Mocha.Events.IEventProvider`1.SubscribeAsync(Mocha.Events.AsyncEventHandler{`0})">
            <summary>
            Registers <see cref="T:Mocha.Events.AsyncEventHandler`1"/> object which will be executed whenever encapsulated event occurs.
            </summary>
            <param name="asyncEventHandler">Object to be registered.</param>
        </member>
        <member name="M:Mocha.Events.IEventProvider`1.UnsubscribeAsync(System.Func{`0,System.Collections.Generic.IReadOnlyCollection{Mocha.Events.AsyncEventHandler},System.Threading.Tasks.Task})">
            <summary>
            Removes given function from subscribtion collection.
            </summary>
            <param name="function">Function to be unsubscribed.</param>
        </member>
        <member name="T:Mocha.Navigation.INavigatable">
            <summary>
            Allows implementing class to participate in the navigation process. 
            </summary>
        </member>
        <member name="P:Mocha.Navigation.INavigatable.Navigator">
            <summary>
            Exposes API for navigation.
            </summary>
        </member>
        <member name="T:Mocha.Navigation.INavigationModule">
            <summary>
            Represents an abstract, technology independent view object.
            Provides methods and properties for working with represented object.
            </summary>
        </member>
        <member name="P:Mocha.Navigation.INavigationModule.View">
            <summary>
            A technology-specific view object.
            </summary>
        </member>
        <member name="P:Mocha.Navigation.INavigationModule.DataContext">
            <summary>
            An <see cref="T:Mocha.Navigation.INavigatable"/> object bounded to <see cref="P:Mocha.Navigation.INavigationModule.View"/>
            instance by *DataBinding* mechanism.
            </summary>
        </member>
        <member name="M:Mocha.Navigation.INavigationModule.SetDataContext(Mocha.Navigation.INavigatable)">
            <summary>
            Allows to set a *DataContext* for technology-specific <see cref="P:Mocha.Navigation.INavigationModule.View"/> object.
            </summary>
            <param name="dataContext">A *DataContext* object which will be bind to 
            <see cref="P:Mocha.Navigation.INavigationModule.View"/> by *DataBinding* mechanism</param>
        </member>
        <member name="M:Mocha.Navigation.INavigationModule.CleanUp">
            <summary>
            Performs an action allowing this object to be removed
            by GC at later time. It is important to set <see cref="P:Mocha.Navigation.INavigationModule.DataContext"/>
            to null. This method will be called internally by <see cref="T:Mocha.Navigation.NavigationService"/>.
            </summary>
        </member>
        <member name="T:Mocha.Navigation.INavigationService">
            <summary>
            Contains a core logic for navigation handling.
            </summary>
        </member>
        <member name="P:Mocha.Navigation.INavigationService.CurrentView">
            <summary>
            Returns a currently active <see cref="T:Mocha.Navigation.INavigationModule"/> object.
            </summary>
        </member>
        <member name="E:Mocha.Navigation.INavigationService.NavigationRequested">
            <summary>
            Fires every time a navigation action has been requested by one of the <see cref="T:Mocha.Navigation.INavigatable"/> object.
            </summary>
        </member>
        <member name="M:Mocha.Navigation.INavigationService.CheckCached(Mocha.Navigation.INavigationModule)">
            <summary>
            Checks whether given type it cached.
            </summary>
            <param name="module">Type to be checked.</param>
        </member>
        <member name="M:Mocha.Navigation.INavigationService.ClearCached">
            <summary>
            Clears every cached <see cref="T:Mocha.Navigation.INavigatable"/> objects.
            </summary>
        </member>
        <member name="M:Mocha.Navigation.INavigationService.ClearCached(Mocha.Navigation.INavigationModule)">
            <summary>
            Removes cached <see cref="T:Mocha.Navigation.INavigatable"/> object of given type. 
            Returns <see langword="true"/> if specified type was found and removed, otherwise <see langword="false"/>.
            </summary>
            <param name="module">Type to be found and removed from cache.</param>
        </member>
        <member name="M:Mocha.Navigation.INavigationService.RequestNavigation(Mocha.Navigation.NavigationData)">
            <summary>
            Handles a navigation requests.
            </summary>
            <param name="navigationData">Essential data for navigation process.</param>
        </member>
        <member name="T:Mocha.Navigation.IOnNavigatedTo">
            <summary>
            Allows implementing class to expose an *OnNavigatedTo* method 
            which is called by <see cref="T:Mocha.Navigation.NavigationService"/> whenever 
            navigation process is about to finish.
            </summary>
        </member>
        <member name="M:Mocha.Navigation.IOnNavigatedTo.OnNavigatedTo(Mocha.Navigation.NavigationData)">
            <summary>
            Called when navigation process is about to finish and new view is displayed.
            This event should contain a set up code for current <see cref="T:Mocha.Navigation.INavigatable"/>
            including event subscribtion. At this point navigation process cannot be rejected. 
            </summary>
            <param name="navigationData">Details of navigation request.</param>
        </member>
        <member name="T:Mocha.Navigation.IOnNavigatedToAsync">
            <summary>
            Allows implementing class to expose an asynchronous version of
            *OnNavigatedTo* method which is called by <see cref="T:Mocha.Navigation.NavigationService"/>.
            </summary>
        </member>
        <member name="M:Mocha.Navigation.IOnNavigatedToAsync.OnNavigatedToAsync(Mocha.Navigation.NavigationData)">
            <summary>
            Called when navigation process is about to finish. 
            </summary>
            <param name="navigationData">Details of navigation request.</param>
        </member>
        <member name="T:Mocha.Navigation.IOnNavigatingFrom">
            <summary>
            Allows implementing class to expose an *OnNavigatingFrom* method 
            which is called by <see cref="T:Mocha.Navigation.NavigationService"/> whenever 
            navigation is requested to another <see cref="T:Mocha.Navigation.INavigationModule"/>.
            </summary>
        </member>
        <member name="M:Mocha.Navigation.IOnNavigatingFrom.OnNavigatingFrom(Mocha.Navigation.NavigationData,Mocha.Navigation.NavigationCancelEventArgs)">
            <summary>
            Called whenever <see cref="T:Mocha.Navigation.INavigationModule"/> that holds this <see cref="T:Mocha.Navigation.INavigatable"/> instance is currently 
            active and the request has been made to navigate to antoher <see cref="T:Mocha.Navigation.INavigationModule"/> instance.
            Currently active <see cref="T:Mocha.Navigation.INavigatable"/> can reject the navigation at this point. Any cleaning code 
            should be put here including unsubscribing from events.
            </summary>
            <param name="navigationData">Details of navigation request.</param>
            <param name="e">Allows for rejecting current navigation process.</param>
        </member>
        <member name="T:Mocha.Navigation.IOnNavigatingFromAsync">
            <summary>
            Allows implementing class to expose an asynchronous version of
            *OnNavigatingFrom* method which is called by <see cref="T:Mocha.Navigation.NavigationService"/>.
            </summary>
        </member>
        <member name="M:Mocha.Navigation.IOnNavigatingFromAsync.OnNavigatingFromAsync(Mocha.Navigation.NavigationData,Mocha.Navigation.NavigationCancelEventArgs)">
            <summary>
            Called when navigation was requested when the owner of this method is currently active. 
            At this point navigation can be rejected.
            </summary>
            <param name="navigationData">Details of navigation request.</param>
            <param name="e">Allows for rejecting current navigation process.</param>
        </member>
        <member name="T:Mocha.Navigation.IOnNavigatingTo">
            <summary>
            Allows implementing class to expose an *OnNavigatingTo* method 
            which is called by <see cref="T:Mocha.Navigation.NavigationService"/> whenever 
            navigation is requested to parent <see cref="T:Mocha.Navigation.INavigationModule"/>.
            </summary>
        </member>
        <member name="M:Mocha.Navigation.IOnNavigatingTo.OnNavigatingTo(Mocha.Navigation.NavigationData,Mocha.Navigation.NavigationCancelEventArgs)">
            <summary>
            Called whenever any <see cref="T:Mocha.Navigation.INavigatable"/> requested a navigation to <see cref="T:Mocha.Navigation.INavigationModule"/> that
            holds this <see cref="T:Mocha.Navigation.INavigatable"/> instance. Do not put any set up code here including event subscribtion as 
            navigation can be rejected at this point. Use this event for deciding whether to reject navigation process.
            </summary>
            <param name="navigationData">Details of navigation request.</param>
            <param name="e">Allows for rejecting current navigation process.</param>
        </member>
        <member name="T:Mocha.Navigation.IOnNavigatingToAsync">
            <summary>
            Allows implementing class to expose an asynchronous version of
            *OnNavigatingTo* method which is called by <see cref="T:Mocha.Navigation.NavigationService"/>.
            </summary>
        </member>
        <member name="M:Mocha.Navigation.IOnNavigatingToAsync.OnNavigatingToAsync(Mocha.Navigation.NavigationData,Mocha.Navigation.NavigationCancelEventArgs)">
            <summary>
            Called when navigation was requested to the owner of this method. At this point navigation
            can be rejected.
            </summary>
            <param name="navigationData">Details of navigation request.</param>
            <param name="e">Allows for rejecting current navigation process.</param>
        </member>
        <member name="T:Mocha.Navigation.NavigationCancelEventArgs">
            <summary>
            Provides data for navigation canceling.
            </summary>
        </member>
        <member name="P:Mocha.Navigation.NavigationCancelEventArgs.Cancel">
            <summary>
            Specifies whether navigation should be aborted.
            </summary>
        </member>
        <member name="P:Mocha.Navigation.NavigationCancelEventArgs.Reason">
            <summary>
            Reason for navigation being aborted.
            </summary>
        </member>
        <member name="T:Mocha.Navigation.NavigationData">
            <summary>
            Contains essential data for navigation process.
            </summary>
        </member>
        <member name="P:Mocha.Navigation.NavigationData.PreviousModule">
            <summary>
            Active <see cref="T:Mocha.Navigation.INavigationModule"/> at the time navigation was requested.
            </summary>
        </member>
        <member name="P:Mocha.Navigation.NavigationData.CallingModule">
            <summary>
            <see cref="T:Mocha.Navigation.INavigationModule"/> which requested a navigation transition.
            </summary>
        </member>
        <member name="P:Mocha.Navigation.NavigationData.RequestedModule">
            <summary>
            Target of navigation process.
            </summary>
        </member>
        <member name="P:Mocha.Navigation.NavigationData.IgnoreCached">
            <summary>
            If set to <see langword="true"/> unconditionally prevents from loading cached 
            <see cref="T:Mocha.Navigation.INavigationModule"/> instances.
            </summary>
        </member>
        <member name="P:Mocha.Navigation.NavigationData.Data">
            <summary>
            An extra data object used to pass information between <see cref="T:Mocha.Navigation.INavigatable"/>
            objects that take part in navigation transition.
            </summary>
        </member>
        <member name="P:Mocha.Navigation.NavigationData.SaveCurrent">
            <summary>
            Determines whether <see cref="P:Mocha.Navigation.NavigationData.CallingModule"/> will be cached.
            </summary>
        </member>
        <member name="M:Mocha.Navigation.NavigationData.#ctor(Mocha.Navigation.INavigationModule,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Mocha.Navigation.NavigationData"/>class.
            </summary>
            <param name="requestedModule">Target of navigation process.</param>
            <param name="data">
            An extra data object used to pass information between <see cref="T:Mocha.Navigation.INavigatable"/>
            objects that take part in navigation transition.
            </param>
            <param name="saveCurrent">Determines whether current <see cref="T:Mocha.Navigation.INavigationModule"/> will be cached.</param>
            <param name="ignoreCached">
            If set to <see langword="true"/> unconditionally prevents from loading cached 
            <see cref="T:Mocha.Navigation.INavigationModule"/> instances.
            </param>
        </member>
        <member name="T:Mocha.Navigation.NavigationManager">
            <summary>
            Mediates between the technology-specific and technology-independent layers.
            </summary>
        </member>
        <member name="M:Mocha.Navigation.NavigationManager.AddModule(System.String,System.Func{Mocha.Navigation.INavigationModule})">
            <summary>
            Stores the function that creates the <see cref="T:Mocha.Navigation.INavigationModule"/> which can be used later
            by the technology-independent layer.
            </summary>
            <param name="id">
            The identifier by which you can find the delegate creating a specific 
            <see cref="T:Mocha.Navigation.INavigationModule"/> from the technology-independent layer.
            </param>
            <param name="navigationViewDelegate">A delegate which creates a <see cref="T:Mocha.Navigation.INavigationModule"/> object.</param>
        </member>
        <member name="M:Mocha.Navigation.NavigationManager.FetchModule(System.String)">
            <summary>
            Returns a new instance of <see cref="T:Mocha.Navigation.INavigationModule"/> object associated
            with given identifier.
            </summary>
            <param name="id">Identifier for <see cref="T:Mocha.Navigation.INavigationModule"/> object to be retrieved.</param>
        </member>
        <member name="T:Mocha.Navigation.NavigationResult">
            <summary>
            Describes the possible outcomes of the navigation process.
            </summary>
        </member>
        <member name="F:Mocha.Navigation.NavigationResult.Succeed">
            <summary>
            Navigation completed successfully.
            </summary>
        </member>
        <member name="F:Mocha.Navigation.NavigationResult.RejectedByCurrent">
            <summary>
            Navigation process was rejected by currently active <see cref="!:NavigationModule"/>.
            </summary>
        </member>
        <member name="F:Mocha.Navigation.NavigationResult.RejectedByTarget">
            <summary>
            Navigation process was rejected by requested <see cref="!:NavigationModule"/>.
            </summary>
        </member>
        <member name="F:Mocha.Navigation.NavigationResult.SameModuleRequested">
            <summary>
            Navigation process was aborted because currently active <see cref="!:NavigationModule"/> was requested.
            </summary>
        </member>
        <member name="T:Mocha.Navigation.NavigationResultData">
            <summary>
            Contains information about navigation result.
            </summary>
        </member>
        <member name="P:Mocha.Navigation.NavigationResultData.Result">
            <summary>
            Specifies the outcome of navigation process.
            </summary>
        </member>
        <member name="P:Mocha.Navigation.NavigationResultData.Reason">
            <summary>
            Describes the cause of navigation ending.
            </summary>
        </member>
        <member name="M:Mocha.Navigation.NavigationResultData.#ctor(Mocha.Navigation.NavigationResult)">
            <summary>
            Returns new instance of <see cref="T:Mocha.Navigation.NavigationResultData"/> class.
            </summary>
            <param name="result">Specifies the outcome of navigation process.</param>
        </member>
        <member name="M:Mocha.Navigation.NavigationResultData.#ctor(Mocha.Navigation.NavigationResult,System.String)">
            <summary>
            Returns new instance of <see cref="T:Mocha.Navigation.NavigationResultData"/> class.
            </summary>
            <param name="result">Specifies the outcome of navigation process.</param>
            <param name="reason">Describes the cause of navigation ending.</param>
        </member>
        <member name="T:Mocha.Navigation.NavigationService">
            <summary>
            Contains a core logic for navigation handling.
            </summary>
        </member>
        <member name="P:Mocha.Navigation.NavigationService.CurrentView">
            <inheritdoc/>
        </member>
        <member name="E:Mocha.Navigation.NavigationService.NavigationRequested">
            <inheritdoc/>
        </member>
        <member name="M:Mocha.Navigation.NavigationService.RequestNavigation(Mocha.Navigation.NavigationData)">
            <inheritdoc/>
        </member>
        <member name="M:Mocha.Navigation.NavigationService.ClearCached">
            <summary>
            Clears every cached <see cref="T:Mocha.Navigation.INavigatable"/> objects.
            </summary>
        </member>
        <member name="M:Mocha.Navigation.NavigationService.ClearCached(Mocha.Navigation.INavigationModule)">
            <inheritdoc/>
        </member>
        <member name="M:Mocha.Navigation.NavigationService.CheckCached(Mocha.Navigation.INavigationModule)">
            <inheritdoc/>
        </member>
        <member name="T:Mocha.Navigation.Navigator">
            <summary>
            Exposes API for navigation.
            </summary>
        </member>
        <member name="P:Mocha.Navigation.Navigator.SaveCurrent">
            <summary>
            Determines whether <see cref="T:Mocha.Navigation.INavigationModule"/> associated with this
            <see cref="T:Mocha.Navigation.Navigator"/> object should be cached.
            </summary>
        </member>
        <member name="M:Mocha.Navigation.Navigator.#ctor(Mocha.Navigation.INavigatable,Mocha.Navigation.INavigationService)">
            <summary>
            Returns new instance of <see cref="T:Mocha.Navigation.Navigator"/> class.
            </summary>
            <param name="host">
            An object that hosts this instance by implementing <see cref="T:Mocha.Navigation.INavigatable"/> interface.
            Pass <see langword="this"/> here.
            </param>
            <param name="navigationService">
            A <see cref="T:Mocha.Navigation.NavigationService"/> object which will process 
            the requestes send by this instance.
            </param>
        </member>
        <member name="M:Mocha.Navigation.Navigator.NavigateAsync(Mocha.Navigation.INavigationModule)">
            <summary>
            Sends navigation request to navigate to specified view.
            </summary>
            <param name="view">Navigation target view.</param>
        </member>
        <member name="M:Mocha.Navigation.Navigator.NavigateAsync(Mocha.Navigation.INavigationModule,System.Object)">
            <summary>
            Sends navigation request to navigate to specified view.
            </summary>
            <param name="view">Navigation target view.</param>
            <param name="data">
            An extra data object used to pass information between <see cref="T:Mocha.Navigation.INavigatable"/>
            objects that take part in navigation transition.
            </param>
        </member>
        <member name="M:Mocha.Navigation.Navigator.NavigateAsync(Mocha.Navigation.INavigationModule,System.Object,Mocha.Navigation.INavigatable)">
            <summary>
            Sends navigation request to navigate to specified view.
            </summary>
            <param name="view">Navigation target view.</param>
            <param name="data">
            An extra data object used to pass information between <see cref="T:Mocha.Navigation.INavigatable"/>
            objects that take part in navigation transition.
            </param>
            <param name="navigatable">A * DataContext * object for target view.</param>
        </member>
        <member name="M:Mocha.Navigation.Navigator.NavigateAsync(Mocha.Navigation.INavigationModule,System.Object,Mocha.Navigation.INavigatable,System.Boolean)">
            <summary>
            Sends navigation request to navigate to specified view.
            </summary>
            <param name="view">Navigation target view.</param>
            <param name="data">
            An extra data object used to pass information between <see cref="T:Mocha.Navigation.INavigatable"/>
            objects that take part in navigation transition.
            </param>
            <param name="navigatable">A * DataContext * object for target view.</param>
            <param name="ignoreCached">Determines whether cached <see cref="T:Mocha.Navigation.INavigationModule"/> 
            objects should be unconditionaly ingored for rising navigation process.</param>
        </member>
        <member name="M:Mocha.Navigation.Navigator.NavigateAsync(Mocha.Navigation.NavigationData)">
            <summary>
            Sends navigation request to navigate with specified <see cref="T:Mocha.Navigation.NavigationData"/> object.
            </summary>
            <param name="navigationData">Contains details for requested navigation process.</param>
        </member>
        <member name="T:Mocha.Settings.Extensions.DI.ISettingsService">
            <summary>
            Allows obtaining <see cref="T:Mocha.Settings.ISettingsSection`1"/> objects for a Dependency Injection based architecture. 
            </summary>
        </member>
        <member name="M:Mocha.Settings.Extensions.DI.ISettingsService.Retrieve``1(System.String)">
            <summary>
            Retrieves settings section registered with given id.
            </summary>
            <typeparam name="T">Type of settings section.</typeparam>
            <param name="id">Id of settings section to be retrieved.</param>
        </member>
        <member name="T:Mocha.Settings.Extensions.DI.SettingsService">
            <summary>
            Provides implementation of <see cref="T:Mocha.Settings.Extensions.DI.ISettingsService"/>.
            </summary>
        </member>
        <member name="M:Mocha.Settings.Extensions.DI.SettingsService.Retrieve``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Mocha.Settings.ISettingsSection`1">
            <summary>
            Represents a single section of settings which can be
            stored between application lunches.
            </summary>
            <typeparam name="T">Type of this section settings.</typeparam>
        </member>
        <member name="M:Mocha.Settings.ISettingsSection`1.Load">
            <summary>
            Returns settings assocaited with this section saved in non-volatile memory. 
            </summary>
        </member>
        <member name="M:Mocha.Settings.ISettingsSection`1.LoadAsync">
            <summary>
            Asynchronously returns settings assocaited with this section saved in non-volatile memory. 
            </summary>
        </member>
        <member name="M:Mocha.Settings.ISettingsSection`1.Save(`0)">
            <summary>
            Saves settings to non-volatile memory.
            </summary>
            <param name="settings">Settings to be saved.</param>
        </member>
        <member name="M:Mocha.Settings.ISettingsSection`1.SaveAsync(`0)">
            <summary>
            Asynchronously saves settings to non-volatile memory.
            </summary>
            <param name="settings">Settings to be saved.</param>
        </member>
        <member name="M:Mocha.Settings.ISettingsSection`1.Update(System.Action{`0})">
            <summary>
            Changes the settings by invoking given delegate and then 
            saves them to non-volatile memory.
            </summary>
            <param name="updateAction">Delegate which changes the settings.</param>
        </member>
        <member name="M:Mocha.Settings.ISettingsSection`1.UpdateAsync(System.Action{`0})">
            <summary>
            Asynchronously changes the settings by invoking given delegate and then 
            saves them to non-volatile memory.
            </summary>
            <param name="updateAction">Delegate which changes the settings.</param>
        </member>
        <member name="T:Mocha.Settings.ISettingsSectionBase">
            <summary>
            Serves as a base interface for <see cref="T:Mocha.Settings.ISettingsSection`1"/>.
            </summary>
        </member>
        <member name="M:Mocha.Settings.ISettingsSectionBase.RestoreDefaults">
            <summary>
            Restores section to its default values.
            </summary>
        </member>
        <member name="M:Mocha.Settings.ISettingsSectionBase.RestoreDefaultsAsync">
            <summary>
            Asynchronously restores section to its default values.
            </summary>
        </member>
        <member name="T:Mocha.Settings.SettingsManager">
            <summary>
            Allows for technology-independent settings management.
            </summary>
        </member>
        <member name="M:Mocha.Settings.SettingsManager.Register``1(System.String,Mocha.Settings.ISettingsSection{``0})">
            <summary>
            Registers a settings section which can be later used by
            technology-independent code base.
            </summary>
            <typeparam name="T">Type of settings section.</typeparam>
            <param name="id">Identifier of registering section.</param>
            <param name="section">Section to be registerd.</param>
        </member>
        <member name="M:Mocha.Settings.SettingsManager.Retrieve``1(System.String)">
            <summary>
            Retrieves settings section registered with given id.
            </summary>
            <typeparam name="T">Type of settings section.</typeparam>
            <param name="id">Id of settings section to be retrieved.</param>
        </member>
    </members>
</doc>
